Consts:
fb_scheme_file = ${spec.out_dir}/fb/${spec.ns}.fbs
---
flat_buf_primitive = Matcher(Primitive):
Bool => bool
I8 => byte
I16 => short
I32 => int
I64 => long
F32 => float
F64 => double
---
flat_buf_predefined = Matcher(Predefined):
String => string
Date => I64
Binary => [byte]
---
flat_buf_list = Formatter(DataType):
[@flatBufDataType($0)]
---
flatBufTuple = UniqueStruct(DataType...):
typeId = ${0.forEach(@typeId)}Tuple
outFile = $fb_scheme_file
pattern:
table ${self.typeId} {
    ${$0.forEach(@flatBufRecordField)}
}
---
commaAndEdlineSeparatedDT = SeqFormatter(DataType):
${@typeId(0)}@ifNotLast(,$endl)
---
flatBufVariant = UniqueStruct(DataType...):
typeId = ${0.forEach(@typeId)}Variant
outFile = $fb_scheme_file
pattern:
union ${self.typeId} {
    @commaAndEdlineSeparatedDT($0)
}
---
flatBufDictionaryCell = UniqueStruct(DictionaryKeyType, DataType):
typeId = ${@typeId(0)}${@typeId(1)}
pattern:
struct ${self.typeId} {
    key: ${@typeId(0)};
    value: ${@typeId(1)};
}
---
flatBufDictionary = Formatter(DictionaryKeyType, DataType):
[${@flatBufDictionaryCell(0,1)}]
---
flatBufDataType = Matcher(DataType):
Primitive = @flat_buf_primitive
Predefined = @flat_buf_predefined
Optional = @flatBufDataType
List = @flat_buf_list
Tuple = @flatBufTuple
Variant = @flatBufVariant
Dictionary = @flatBufDictionary
Enum = @enumTypeId
Record = @recordTypeId
---
flatBufRecordField = Formatter(String,DataType):
$0:@flatBufDataType($1);$endl
---
flatBufRecord = RecordWriter:
out_file = $fb_scheme_file
pattern:
table ${record.name} {
    ${record.fields.forEach(@flatBufRecordField)}
}
---
flatBufEnum = EnumWriter:
out_file = $fb_scheme_file
pattern:
enum ${enum.name} {
    ${enum.options.forEach(@commaAndEdlineSeparated)}
}
---
WHITESPACE = _{ " " }

alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
rule_delim = _{"---"}

bool = {"Bool"}
i8 = {"I8"}
i16 = {"I16"}
i32 = {"I32"}
i64 = {"I64"}
f32 = {"F32"}
f64 = {"F64"}
primitive = _{ bool | i8 | i16 | i32 | i64 | f32 | f64 }

string = {"String"}
date = {"Date"}
binary = {"Binary"}
predefined = _{ string | date | binary }

ident = { (ASCII_ALPHANUMERIC | "_")+ }

path_nest_call_seq = { (alpha | digit | "." | "_")+ }
path_nest_call = { "${" ~ path_nest_call_seq ~ "}" }
path_str = { (alpha | digit | "/" | "." )+ }
path = { (path_str | path_nest_call)+ }

const_def = {
    ident ~ "=" ~ path
}

consts = {
    "Consts" ~ "=" ~ "{" ~ NEWLINE
    ~ (const_def ~ NEWLINE)+
    ~ "}"
}

any_seq_ch = { !(NEWLINE) ~ ANY }
any_seq = { (!(NEWLINE) ~ ANY)+ }

matcher_primitive = {
    "Matcher(Primitive)" ~ "=" ~ "{" ~ NEWLINE
    ~ (primitive ~ "=>" ~ any_seq ~ NEWLINE)+
    ~ "}"
}

matcher_predefined = {
    "Matcher(Predefined)" ~ "=" ~ "{"  ~ NEWLINE
    ~ (predefined ~ "=>" ~ any_seq ~ NEWLINE)+
    ~ "}"
}

number_ref = { digit }
any_meta = { "_" }
meta_or_any = _{ meta | any_meta }

optional = { "Optional<" ~ meta_or_any ~">" }
list = { "List<" ~ meta_or_any ~">" }
tuple = { "Tuple<" ~ meta_or_any~ ("," ~ meta)* ~">" }
variant = { "Variant<" ~ meta_or_any~ ("," ~ meta)* ~">" }
dictionary = { "Dictionary<" ~ (any_meta | (meta ~ meta)) ~ ">" }
closure_params = { (meta ~ ("," ~ meta)*)? }
closure_return = { "()" | meta }
closure = { "Closure<" ~ (any_meta | ("(" ~ closure_params ~ ")" ~ "->" ~ closure_return) )  ~ ">"}
enumt = { "Enum"}
recordt = { "Record" }
interfacet = { "Interface" }

meta = _{
    number_ref |
    primitive |
    predefined |
    optional |
    list |
    tuple |
    variant |
    dictionary |
    closure |
    enumt |
    recordt |
    interfacet
}

nest_call_meta_or_any = { meta | any_meta }
nest_call_any_seq = { (!(NEWLINE) ~ !("${") ~ ANY)+ }
nest_call_formatter_arg_str_any_seq = { (!(NEWLINE) ~ !("\"") ~ ANY)+ }
nest_call_formatter_arg_str = { "\"" ~ nest_call_formatter_arg_str_any_seq* ~ "\"" }
nest_call_formatter_arg =  _{
    nest_call_formatter |
    nest_call_meta_or_any |
    nest_call_formatter_arg_str |
    ident
}
nest_call_formatter_args = { nest_call_formatter_arg ~ ("," ~ nest_call_formatter_arg)* }
nest_call_formatter = { ident ~ "(" ~ nest_call_formatter_args ~ ")" }

nest_call = { "${" ~ (nest_call_formatter | ident) ~ "}" }

unwrap_seq = { (nest_call | nest_call_any_seq)+ }

unwrap = { "Unwrap" ~ "(" ~ meta ~ ")" ~ "=" ~ unwrap_seq }

formatter_arg = { (ident | "_")+ }
formatter_args = { formatter_arg ~ ("," ~ formatter_arg)* }
formatter = { ident ~ ":" ~ "Formatter" ~ "(" ~ formatter_args ~ ")" ~ "=" ~ unwrap_seq }

pattern_any_seq_ch = { (!(NEWLINE) ~ !(" ") ~ !("\t") ~ !("${") ~ !("%>") ~ ANY)+ }
pattern_nl = { NEWLINE }
pattern_ws = { " " }
pattern_tab = { "\t" }
pattern = ${ (nest_call | pattern_nl | pattern_ws | pattern_tab | pattern_any_seq_ch)+ }

unique = {
    "Unique" ~ "(" ~ meta ~ ")" ~ "=" ~ "{" ~ NEWLINE ~
        "id" ~ "=" ~ unwrap_seq ~ NEWLINE ~
        "out" ~ "=" ~ path ~ NEWLINE ~
        "pattern:" ~ NEWLINE ~
        "<%" ~ pattern ~ "%>" ~ NEWLINE ~
    "}"
}

scheme_variant = _{
    consts |
    matcher_primitive |
    matcher_predefined |
    unwrap |
    formatter |
    unique
}

scheme = {
    SOI ~
    (scheme_variant? ~ NEWLINE)+ ~
    EOI
}
